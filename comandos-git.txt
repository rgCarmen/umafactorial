ITEM 1 ->
	// El comando "git clone" nos permite clonar un repositorio en un nuevo directorio, en este caso un repositorio existente de GitHub especificado por la URL. Obtenemos el repositorio entero, en esta ocasión solo tenía un fichero README.md
git clone https://github.com/rgCarmen/umafactorial.git


ITEM 3 ->
	// El comando "git add" añade nuevos ficheros o cambios de ficheros ya existentes del  de trabajo al Staging Area. El staging area es un lugar lógico donde se almacenan los cambios hasta ser confirmados en el repositorio. 
	// De esta manera, marcamos los cambios que serán incluidos en el siguiente commit. En este caso añadimos el nuevo fichero factorial.java al staging area.
git add factorial.java

	// El comando de "git commit" registra los cambios en el repositorio como una instantánea del repositorio en el momento específico. 
	// Para que este comando funcione deben haberse añadido ficheros mediante "git add" previamente, ya que se fija en los cambios indicados en el staging area. Utilizamos "git commit -m" para añadir un mensaje descriptivo al commit. 
git commit -m "implementacion inicial"

ITEM 4 ->
	// De la misma forma que en ITEM 3, añadimos las nuevas modificaciones realizadas en el fichero factorial.java mediante el comando "git add" al staging area.
 git add factorial.java

	// Confirmamos los cambios mediante el comando "git commit" con el mensaje requerido
git commit -m "refactorizacion"

ITEM 5 ->
	// El comando "git push" actualiza referencias remotas utilizando las locales. Nos va a permitir subir los commits desde el repositorio local al remoto. En esta caso, estamos subiendo los cambios en la rama main al repositorio remoto origen.
git push origin main

	// El comando "git checkout" actualiza los archivos en el directorio de trabajo para que coincidadn con la versión de la rama indicada. 
	// En este caso, mediante "git checkout -b", creamos una nueva rama y cambiamos a esta nueva rama en un solo comando. De esta manera, creamos una nueva rama llamada recursivo.
git checkout -b recursivo

ITEM 7 ->
	// Añadimos los cambios realizados en la rama recursivo en el fichero factorial.java mediante un commit.
git add factorial.java
git commit -m "implementacion recursiva"

	// Mediante "git push" subimos los cambios realizados en la rama recursivo al repositorio remoto, por lo que indicamos en esta ocasion como rama recursivo en lugar de main.
git push origin recursivo

ITEM 8 ->
	// Mediante el comando "git checkout" cambiamos a la rama main. Se actualizarán los archivos del directorio de trabajo consecuentemente.
git checkout main

ITEM 10 ->
	// Añadimos la modificación realizada en la rama main mediante un nuevo commit.	
git add factorial.java
git commit -m "correccion numeros negativos"

	// Enviamos el commit realizado en la rama main al repositorio remoto mediante "git push"
git push origin main

ITEM 11 ->
	// Mediante "git checkout" cambiamos a la rama recursivo.
git checkout recursivo

	// Añadimos la modificación realizada en la rama recursivo mediante un nuevo commit.	
git add factorial.java
git commit -m "optimizacion"

ITEM 12 ->
	// Cambiamos a la rama main nuevamente.
git checkout main

	// El comando "git merge" fusiona los cambios de la rama indicada en la rama actual. En este caso añadirá los cambios de la rama recursivo en la rama main. 
	// Se realizar la fusión de forma automática en el caso de que no haya conflictos como ocurre en esta ocasión.
git merge recursivo

ITEM 13 ->
	// Mediante "git checkout -b" creamos y cambiamos el espacio de trabajo a una nueva rama denominada refacIO.
git checkout -b refacIO

ITEM 14 ->
	// Añadimos la modificación realizada en la rama refacIO mediante un nuevo commit.	
git add factorial.java
git commit -m "refactorizacion de metodo de entrada"

ITEM 15 ->
	// El comando "git stash" guardar temporalmente los cambios sin realizar un commit. Permitiendo por tanto cambiar la rama en la que se trabaja o otra acción si comprometer los cambios.
git stash

	// Cambiamos a la rama main mediante "git checkout".
git checkout main

ITEM 16 ->
	// Añadimos la modificación realizada en la rama main mediante un nuevo commit.
git add factorial.java
git commit -m "cambio de long a BigInteger"

	// Enviamos el commit realizado en la rama main al repositorio remoto.
git push origin main

	// Cambiamos a la rama refacIO
git checkout refacIO

	// Mediante el comando "git stash pop" aplicamos el cambio más reciente que se encuentra en el stash al directorio de trabajo recuperando estos cambios guardados y lo elimana del stash. 
git stash pop

	// Añadimos los cambios de la rama refacIO mediante un commit.
git add factorial.java
git commit -m "refactorizacion de metodo de salida"

ITEM 17 ->
	// Cambiamos a la rama main
git checkout main  

	// Mediante "git merge", fusionamos los cambios de la rama refacIO en la rama main. En este caso, se producen conflictos, por lo que es necesario completar el proceso de forma manual.
git merge refacIO
>>Auto-merging factorial.java
  CONFLICT (content): Merge conflict in factorial.java
  Automatic merge failed; fix conflicts and then commit the result.

ITEM 19 ->
	// Añadimos los cambios en la rama main mediante un commit, completando así el proceso de merge.
git add factorial.java
git commit -m "mezcla de rama refacIO"

	// Enviamos el commit realizado en la rama main al repositorio remoto.
git push origin main

ITEM 21 ->
	// Añadir fichero comandos-git.txt mediante un commit.
git add comandos-git.txt
git commit -m "adicion de historial de línea de comandos"

ITEM 22 ->
	// Enviamos todos los commit de todas las ramas locales al repositorio remoto
git push --all origin
directorio